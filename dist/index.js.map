{"version":3,"sources":["../src/index.js"],"names":["getStateSlice","state","scope","path","indexOf","split","reduce","value","pathSegment","createScopedAction","actionCreator","type","meta","createScopedSelector","selector","props","createScopedReducer","reducer","action","undefined","startsWith"],"mappings":";;;;;;;;AAAA;;;;;;;AAOO,IAAMA,wCAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAQC,KAAR,EAAkB;AAC7C,MAAMC,OAAOD,MAAME,OAAN,CAAc,GAAd,MAAuB,CAAC,CAAxB,GAA4B,CAACF,KAAD,CAA5B,GAAsCA,MAAMG,KAAN,CAAY,GAAZ,CAAnD;AACA,SAAOF,KAAKG,MAAL,CAAY,UAACC,KAAD,EAAQC,WAAR;AAAA,WAAwBD,MAAMC,WAAN,CAAxB;AAAA,GAAZ,EAAwDP,KAAxD,CAAP;AACD,CAHM;;AAKP;;;;;;;;;AASO,IAAMQ,kDAAqB,SAArBA,kBAAqB,CAACC,aAAD,EAAgBR,KAAhB,EAA0B;AAAA,uBACzCQ,eADyC;AAAA,MAClDC,IADkD,kBAClDA,IADkD;;AAE1D,SAAO;AAAA,wBACFD,yCADE;AAELE,yBAAWF,0CAAuBE,IAAlC,IAAwCV,YAAxC;AAFK;AAAA,GAAP;AAID,CANM;;AAQP;;;;;;;AAOO,IAAMW,sDAAuB,SAAvBA,oBAAuB,CAACC,QAAD,EAAWZ,KAAX;AAAA,SAAqB,UAACD,KAAD,EAAQc,KAAR;AAAA,WACvDD,SAASd,cAAcC,KAAd,EAAqBC,KAArB,CAAT,EAAsCa,KAAtC,CADuD;AAAA,GAArB;AAAA,CAA7B;;AAGP;;;;;;;;;;AAUO,IAAMC,oDAAsB,SAAtBA,mBAAsB,CAACC,OAAD,EAAUf,KAAV;AAAA,SAAoB,UAACD,KAAD,EAAQiB,MAAR,EAAmB;AACxE,QACEjB,UAAUkB,SAAV,IACCD,OAAON,IAAP,IAAeM,OAAON,IAAP,CAAYV,KAA3B,IAAoCgB,OAAON,IAAP,CAAYV,KAAZ,CAAkBkB,UAAlB,CAA6BlB,KAA7B,CAFvC,EAGE;AACA,aAAOe,QAAQhB,KAAR,EAAeiB,MAAf,CAAP;AACD;AACD,WAAOjB,KAAP;AACD,GARkC;AAAA,CAA5B","file":"index.js","sourcesContent":["/**\n * Utility to grab a slice of the state based on the scope\n *\n * @param {object} state - A branch of a state object\n * @param {string} scope  - A key pointing to a part of state\n * @return {object} - the slice of state\n */\nexport const getStateSlice = (state, scope) => {\n  const path = scope.indexOf('/') === -1 ? [scope] : scope.split('/')\n  return path.reduce((value, pathSegment) => value[pathSegment], state)\n}\n\n/**\n * Creates an action creator with predefined scope. This allows generic\n * action creators to be created for a specific part of state.\n *\n * @param {function} actionCreator - Function which creates an action. The `scope` must\n *                                  be the last param.\n * @param {string} scope - State path\n * @return {function} Scoped action creator\n */\nexport const createScopedAction = (actionCreator, scope) => {\n  const { type } = actionCreator()\n  return (...args) => ({\n    ...actionCreator(...args),\n    meta: { ...actionCreator(...args).meta, scope }\n  })\n}\n\n/**\n * Create a selector with a predefined scope. This allows generic selectors\n * to be created for a specific part of state.\n * @param {function} selector - Selector which is relative to a slice of state\n * @param {string} scope - State path\n * @return {function} Scoped selector\n */\nexport const createScopedSelector = (selector, scope) => (state, props) =>\n  selector(getStateSlice(state, scope), props)\n\n/**\n * A helper to manage scoped actions. This utility acts as a gatekeeper.\n * The reducer will only be invoked if the scope matches or when the reducer\n * is initialized with an undefined state. The second case allows the\n * initialState to be applied.\n *\n * @param {function} reducer - Reducer function to scope\n * @param {string} scope - State path\n * @return {function}\n */\nexport const createScopedReducer = (reducer, scope) => (state, action) => {\n  if (\n    state === undefined ||\n    (action.meta && action.meta.scope && action.meta.scope.startsWith(scope))\n  ) {\n    return reducer(state, action)\n  }\n  return state\n}\n"]}