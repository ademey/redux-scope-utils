{"version":3,"sources":["../src/index.js"],"names":["getStateSlice","state","key","path","indexOf","split","reduce","value","pathSegment","createScopedAction","actionCreator","scope","type","meta","createScopedSelector","selector","props","createScopedReducer","reducer","action","undefined","startsWith"],"mappings":";;;;;;;;AAAA;;;;;;;AAOO,IAAMA,wCAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAQC,GAAR,EAAgB;AAC3C,MAAMC,OAAOD,IAAIE,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,GAA0B,CAACF,GAAD,CAA1B,GAAkCA,IAAIG,KAAJ,CAAU,GAAV,CAA/C;AACA,SAAOF,KAAKG,MAAL,CAAY,UAACC,KAAD,EAAQC,WAAR;AAAA,WAAwBD,MAAMC,WAAN,CAAxB;AAAA,GAAZ,EAAwDP,KAAxD,CAAP;AACD,CAHM;;AAKP;;;;;;;;;AASO,IAAMQ,kDAAqB,SAArBA,kBAAqB,CAACC,aAAD,EAAgBC,KAAhB,EAA0B;AAAA,uBACzCD,eADyC;AAAA,MAClDE,IADkD,kBAClDA,IADkD;;AAE1D,SAAO;AAAA,wBACFF,yCADE;AAELG,yBAAWH,0CAAuBG,IAAlC,IAAwCF,YAAxC;AAFK;AAAA,GAAP;AAID,CANM;AAOP;;;;;;;AAOO,IAAMG,sDAAuB,SAAvBA,oBAAuB,CAACC,QAAD,EAAWJ,KAAX;AAAA,SAAqB,UAACV,KAAD,EAAQe,KAAR;AAAA,WACvDD,SAASf,cAAcC,KAAd,EAAqBU,KAArB,CAAT,EAAsCK,KAAtC,CADuD;AAAA,GAArB;AAAA,CAA7B;;AAGP;;;;;;;;;;AAUO,IAAMC,oDAAsB,SAAtBA,mBAAsB,CAACC,OAAD,EAAUP,KAAV;AAAA,SAAoB,UAACV,KAAD,EAAQkB,MAAR,EAAmB;AACxE,QACElB,UAAUmB,SAAV,IACCD,OAAON,IAAP,IAAeM,OAAON,IAAP,CAAYF,KAA3B,IAAoCQ,OAAON,IAAP,CAAYF,KAAZ,CAAkBU,UAAlB,CAA6BV,KAA7B,CAFvC,EAGE;AACA,aAAOO,QAAQjB,KAAR,EAAekB,MAAf,CAAP;AACD;AACD,WAAOlB,KAAP;AACD,GARkC;AAAA,CAA5B","file":"index.js","sourcesContent":["/**\n * Utility to grab a slice of the state based on the instanceId (key)\n *\n * @param {object} state - A branch of a state object\n * @param {string} key   - A key pointing to a part of state\n * @return {object} - the slice of state\n */\nexport const getStateSlice = (state, key) => {\n  const path = key.indexOf('/') === -1 ? [key] : key.split('/')\n  return path.reduce((value, pathSegment) => value[pathSegment], state)\n}\n\n/**\n * Creates an action creator with predefined scope. This allows generic\n * action creators to be created for a specific part of state.\n *\n * @param {function} actionCreator - Function which creates an action. The `scope` must\n *                                  be the last param.\n * @param {string} scope - State path\n * @return {function} Scoped action creator\n */\nexport const createScopedAction = (actionCreator, scope) => {\n  const { type } = actionCreator()\n  return (...args) => ({\n    ...actionCreator(...args),\n    meta: { ...actionCreator(...args).meta, scope }\n  })\n}\n/**\n * Create a selector with a predefined scope. This allows generic selectors\n * to be created for a specific part of state.\n * @param {function} selector - Selector which is relative to a slice of state\n * @param {string} scope - State path\n * @return {function} Scoped selector\n */\nexport const createScopedSelector = (selector, scope) => (state, props) =>\n  selector(getStateSlice(state, scope), props)\n\n/**\n * A helper to manage scoped actions. This utility acts as a gatekeeper.\n * The reducer will only be invoked if the scope matches or when the reducer\n * is initialized with an undefined state. The second case allows the\n * initialState to be applied.\n *\n * @param {function} reducer - Reducer function to scope\n * @param {string} scope - State path\n * @return {function}\n */\nexport const createScopedReducer = (reducer, scope) => (state, action) => {\n  if (\n    state === undefined ||\n    (action.meta && action.meta.scope && action.meta.scope.startsWith(scope))\n  ) {\n    return reducer(state, action)\n  }\n  return state\n}\n"]}