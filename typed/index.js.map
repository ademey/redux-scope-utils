{"version":3,"sources":["../src/typed/index.js"],"names":["getStateSlice","state","scope","path","indexOf","split","reduce","value","pathSegment","createScopedAction","actionCreator","type","rest","createScopedSelector","selector","props","createScopedReducer","reducer","action","actionType","actionScope","undefined"],"mappings":";;;;;;;;;;;;AACA;;;;;;;AAOO,IAAMA,wCAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAQC,KAAR,EAAkB;AAC7C,MAAMC,OAAOD,MAAME,OAAN,CAAc,GAAd,MAAuB,CAAC,CAAxB,GAA4B,CAACF,KAAD,CAA5B,GAAsCA,MAAMG,KAAN,CAAY,GAAZ,CAAnD;AACA,SAAOF,KAAKG,MAAL,CAAY,UAACC,KAAD,EAAQC,WAAR;AAAA,WAAwBD,MAAMC,WAAN,CAAxB;AAAA,GAAZ,EAAwDP,KAAxD,CAAP;AACD,CAHM;;AAKP;;;;;;;;;AASO,IAAMQ,qBAAqB,SAArBA,kBAAqB,CAACC,aAAD,EAAgBR,KAAhB,EAA0B;AAAA,uBAChCQ,eADgC;AAAA,MAClDC,IADkD,kBAClDA,IADkD;AAAA,MACzCC,IADyC;;AAE1D,SAAO;AAAA;AACLD,YAASA,IAAT,SAAiBT;AADZ,OAEFU,IAFE;AAAA,GAAP;AAID,CANM;;AAQP;;;;;;;;AAOO,IAAMC,sDAAuB,SAAvBA,oBAAuB,CAACC,QAAD,EAAWZ,KAAX;AAAA,SAAqB,UAACD,KAAD,EAAQc,KAAR;AAAA,WACvDD,SAASd,cAAcC,KAAd,EAAqBC,KAArB,CAAT,EAAsCa,KAAtC,CADuD;AAAA,GAArB;AAAA,CAA7B;;AAGP;;;;;;;;;;AAUO,IAAMC,oDAAsB,SAAtBA,mBAAsB,CAACC,OAAD,EAAUf,KAAV;AAAA,SAAoB,UAACD,KAAD,EAAQiB,MAAR,EAAmB;AAAA,6BACtCA,OAAOP,IAAP,CAAYN,KAAZ,CAAkB,GAAlB,CADsC;AAAA;AAAA,QACjEc,UADiE;AAAA,QACrDC,WADqD;;AAExE,QAAInB,UAAUoB,SAAV,IAAuBD,gBAAgBlB,KAA3C,EAAkD;AAChD,aAAOe,QAAQhB,KAAR,eAAoBiB,MAApB,IAA4BP,MAAMQ,UAAlC,IAAP;AACD;AACD,WAAOlB,KAAP;AACD,GANkC;AAAA,CAA5B","file":"index.js","sourcesContent":["\n/**\n * Utility to grab a slice of the state based on the scope\n *\n * @param {object} state - A branch of a state object\n * @param {string} scope  - A key pointing to a part of state\n * @return {object} - the slice of state\n */\nexport const getStateSlice = (state, scope) => {\n  const path = scope.indexOf('/') === -1 ? [scope] : scope.split('/');\n  return path.reduce((value, pathSegment) => value[pathSegment], state);\n};\n\n/**\n * Creates an action creator with predefined scope. This allows generic\n * action creators to be created for a specific part of state.\n *\n * @param {function} actionCreator - Function which creates an action. The `scope` must\n *                                  be the last param.\n * @param {string} scope - State path\n * @return {function} Scoped action creator\n */\nexport const createScopedAction = (actionCreator, scope) => {\n  const { type, ...rest } = actionCreator();\n  return (...args) => ({\n    type: `${type}@${scope}`,\n    ...rest\n  });\n};\n\n/**\n * Create a selector with a predefined scope. This allows generic selectors\n * to be created for a specific part of state.\n * @param {function} selector - Selector which is relative to a slice of state\n * @param {string} scope - State path\n * @return {function} Scoped selector\n */\nexport const createScopedSelector = (selector, scope) => (state, props) =>\n  selector(getStateSlice(state, scope), props);\n\n/**\n * A helper to manage scoped actions. This utility acts as a gatekeeper.\n * The reducer will only be invoked if the scope matches or when the reducer\n * is initialized with an undefined state. The second case allows the\n * initialState to be applied.\n *\n * @param {function} reducer - Reducer function to scope\n * @param {string} scope - State path\n * @return {function}\n */\nexport const createScopedReducer = (reducer, scope) => (state, action) => {\n  const [actionType, actionScope] = action.type.split('@')\n  if (state === undefined || actionScope === scope) {\n    return reducer(state, { ...action, type: actionType} );\n  }\n  return state;\n};\n"]}