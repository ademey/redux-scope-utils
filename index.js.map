{"version":3,"sources":["src/index.js"],"names":["getStateSlice","state","scope","path","indexOf","split","reduce","value","pathSegment","scopedAction","actionCreator","meta","scopedSelector","selector","props","scopedReducer","reducer","action","undefined","scopedDispatch","dispatch","mapStateToScope","mapDispatchToScope","mapFunction","scopedConnect","mstp","mdtp","rest","component","connect","createScopedAction","createScopedReducer","createScopedSelector","createScopedDispatch"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\r\n\r\n/**\r\n * Utility to grab a slice of the state based on the scope\r\n *\r\n * @param {object} state - A branch of a state object\r\n * @param {string} scope  - A key pointing to a part of state\r\n * @return {object} - the slice of state\r\n */\r\nexport const getStateSlice = (state, scope) => {\r\n  const path = scope.indexOf('/') === -1 ? [scope] : scope.split('/');\r\n  return path.reduce((value, pathSegment) => value[pathSegment], state);\r\n};\r\n\r\n/**\r\n * Creates an action creator with predefined scope. This allows generic\r\n * action creators to be created for a specific part of state.\r\n *\r\n * @param {function} actionCreator - Function which creates an action. The `scope` must\r\n *                                  be the last param.\r\n * @param {string} scope - State path\r\n * @return {function} Scoped action creator\r\n */\r\nexport const scopedAction = (actionCreator, scope) => (...args) => ({\r\n  ...actionCreator(...args),\r\n  meta: { ...actionCreator(...args).meta, scope }\r\n});\r\n\r\n/**\r\n * Create a selector with a predefined scope. This allows generic selectors\r\n * to be created for a specific part of state.\r\n * @param {function} selector - Selector which is relative to a slice of state\r\n * @param {string} scope - State path\r\n * @return {function} Scoped selector\r\n */\r\nexport const scopedSelector = (selector, scope) => (state, props) =>\r\n  selector(getStateSlice(state, scope), props);\r\n\r\n/**\r\n * A helper to manage scoped actions. This utility acts as a gatekeeper.\r\n * The reducer will only be invoked if the scope matches or when the reducer\r\n * is initialized with an undefined state. The second case allows the\r\n * initialState to be applied.\r\n *\r\n * @param {function} reducer - Reducer function to scope\r\n * @param {string} scope - State path\r\n * @return {function}\r\n */\r\nexport const scopedReducer = (reducer, scope) => (state, action) => {\r\n  if (state === undefined || (action.meta && action.meta.scope === scope)) {\r\n    return reducer(state, action);\r\n  }\r\n  return state;\r\n};\r\n\r\n/**\r\n * Create a dispatch function which will apply a scope to all dispatched\r\n * action objects.\r\n * @param {function} dispatch - Original dispatch\r\n * @param {string} scope - State path\r\n * @return {function} Modified dispatch function\r\n */\r\nexport const scopedDispatch = (dispatch, scope) => action => {\r\n  // TODO: Should this do an error or something?\r\n  if (typeof action !== 'object') {\r\n    dispatch(action);\r\n  }\r\n\r\n  dispatch(scopedAction(() => action, scope)());\r\n};\r\n\r\n/**\r\n * Create a `mapStateToProps` function in which the state is scoped.\r\n * @param {function} mapFunction - mapStateToProps\r\n * @param {string} scope - Path to the undoable instance\r\n * @return {function}\r\n */\r\nexport const mapStateToScope = scopedSelector;\r\n\r\n/**\r\n * Create a `mapDispatchToProps` function in which all actions dispatched are\r\n * given a scope.\r\n *\r\n * // TODO: This does not work with thunks!\r\n * @param {function} mapFunction - mapDispatchToProps\r\n * @param {string} scope - Path to the undoable instance\r\n * @return {function}\r\n */\r\nexport const mapDispatchToScope = (mapFunction, scope) => (dispatch, props) =>\r\n  mapFunction(scopedDispatch(dispatch, scope), props);\r\n\r\n/**\r\n * Connect a component so that it's state is relative to the undoable scope. Anything\r\n * dispatched will have the scope and undoableScope applied.\r\n * @param {string} scope - Path to the undoable instance\r\n * @param {string} [undoableScope] - Property name reducer was assigned to in `undoableReducers`\r\n * @return {function}\r\n */\r\nexport const scopedConnect = scope => (mstp, mdtp, ...rest) => component =>\r\n  connect(\r\n    mapStateToScope(mstp, scope),\r\n    mapDispatchToScope(mdtp, scope),\r\n    ...rest\r\n  )(component);\r\n\r\nexport const createScopedAction = scopedAction;\r\nexport const createScopedReducer = scopedReducer;\r\nexport const createScopedSelector = scopedSelector;\r\nexport const createScopedDispatch = scopedDispatch;\r\n"],"file":"index.js"}